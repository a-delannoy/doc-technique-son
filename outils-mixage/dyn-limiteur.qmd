# Les limiteurs

<!-- 

# How to Use a Limiter

**Part 1 : Introduction**

Limiter processing is one of the "hot topics" on the internet about sound processing. It's close relation with mastering and loudness level makes it an unmissable tool for sound and music production.

In this first article, we will have a very simple look at limiters, to help beginners to sort out what's happening there. In the next episode, we will go much deeper, so stay tuned!

If you are in a hurry, check the TL;DR section of this article to get a summary as well as a video explanation of the subject.

![FLUX:: Elixir limiter in action](:/ffd28ea04c984e7485285efdf83af6db)

## What are the types of limiters ?

The broadest definition of limiters is to consider that a limiter is a compressor with a ratio superior to 10:1. During this series of articles, we will assess that what we call a limiter is a "true-peak limiter", which has more constraints than the one above. 

The limiters we are interested in here are true-peak limiters. They are dynamic tools specifically design to reduce audio crest, very much like a safety guard, to prevent any clipping from the digital to analog stage. Thanks to the peak reduction, it is possible to use such limiter to increase the loudness of the input signal. 

## Why the need for limiting ?

The very last process of music production is to set the overall level, or loudness of a mix. Limiting is the only "safe" way to amplify the loudness of a mix. But it comes at a cost.

A limiter will "cut" the crest of the signal to make some headroom to allow amplifying the rest. The cost of limiting is a loss of dynamic and an additional distortion.

The true-peak level is the actual level of the samples, or of the waveform if you prefer. The loudness is closer to our sound perception and smooth out quick sound variation because they do not matter that much in our perception of sound loudness.

Using a limiter also provides the guaranty to never clip the digital-to-analogue stage. This is a very important safeguard and explains why there is always a limiter at the end of the chain, even if it doesn't do much.

Limiting will always come at the cost of more saturation added to the signal, but in a very much more transparent way than just cranking the output gain and clip the converters. Clipping the converter is considered as a technical error (even if some popular master does clips at the converting stage).

## When is the need for limiting ?

If you want to make a mix louder without clipping the hell out of the digital-to-analogue converter, you will need a limiter. The limiter will reduce the peak and give you headroom to amplify the whole gain without clipping the output stage.

Limiting is also often needed to conform a mix to certain norms. For example, most music streaming platform will refuse a mix with a true-peak level higher than -1 dBTP.

## Is limiting mandatory ?

Limiting is mandatory in the sense that a mix should never exceed 0 dBFS. So using a limiter with a threshold at 0 dBFS will always prevent that from happening. Most of the time, platform (streaming, broadcast, etc.) ask for mixes that do not exceed -1 dBFS.

Increasing the loudness of a mix is **never mandatory**. Maybe we will create a debate here, but loudness in music production is very much an aesthetic decision. So, to continue on controversial topics : a louder mix does not sound better than a quiet one. Actually, it sounds less dynamic and more distorted. Also, there are no norms in music diffusion. Each and every platform has its way to handle the loudness of submitted audio files. For example, we often encounter the idea that a good deliverable should have a loudness of **-14 LUFS-I** with a true peak never exceeding **-1 dBTP** . This value comes mainly from the [Spotify guidelines](https://artists.spotify.com/help/article/loudness-normalization). But, it is not entirely exact, as Spotify offer different loudness target for their customer. There is a loud (-11 LUFS-I), normal (-14 LUFS-I) and quiet mode (-19 LUFS-I). Apple recommends -16 LUFS-I and before 2022, YouTube normalized loudness at -12 LUFS-I (now -14 LUFS-I). So which one should we choose ? The common consensus is around -14 LUFS-I because it covers the biggest user base.

Then, what happens with a file that is above the target? If a file is submitted with a loudness target above the recommendation of the platform, the file volume will be simply drop by the number of dB necessary to match the recommendation. So the process is transparent to what you've mixed and mastered.

If a file is lower than the target, most of the streaming services do nothing about it. The file will simply be quieter than the other one. YouTube used to be an exception before 2022, but Spotify in loud mode will limit the content to match the -11 LUFS-I target.

So how can we handle this mess ? It seems there are three possible solutions.

+ Follow the most common recommendation, aka Spotify (-14 LUFS at -1 dBTP)
+ Align on the loudest one to make sure that no processing will affect your work (at the detriment of the dynamic range)
+ ... Don't care about it?

Actually, the last point is the one defended by the author. Loudness and more importantly dynamic range is not only a technical thing, it is also an aesthetic choice. Some genre of music have built their aesthetic on very compressed and saturated sound, where others want to have all the accessible dynamics.

As a general guide, we will simply assume that it is a best practice to ever exceed -1 dBTP. Also, it is preferred to have the loudest peak of a program, or a song, to always hit this -1 dBTP target.

## TL;DR

///VIDEO : Loudness and limiting

Mastering limiters are designed to reduce the crest of a mix and allow it to increase its loudness. Their true-peak characteristic allows them to never let a sample cross the threshold.

Limiting should always be used to prevent a mix from clipping the digital-to-analogue converter. However, due to the many different loudness target found in the streaming services, it is difficult, if not impossible, to "go-to" recommendation as for the loudness of a track. It seems to be more an aesthetic choice than a technical one, at least, in the music industry.

## Appendix : dB ? dBFS ? LUFS ? What is it all about ?

There are quite a few acronyms and concept to explain around sound pressure level and how it is measured. Because sound is a mechanical wave, the primary way to measure the sound pressure level is to measure how the pressure evolves in a space.

First, **the relation between sound pressure and how we feel level is not linear**. For example, when the sound pressure is doubled, we do not perceive a sound twice as loud. In fact, to have a sense a sound twice as loud, we need to multiply the pressure by ten. This is why we express the sound pressure level in decibels, which is a logarithmic scale that is much closer to our perception. When the sound pressure is doubled, there is a gain of **+3 dB**. When the pressure is multiply by ten, there is a gain of **+10 dB**.

Depending on the field of interest, there are many different units build around the decibel scale. The one that is used in digital sound is the **dBFS**, or **decibel full scale**. In the digital domain, sound is represented by samples, whose amplitude can take absolute values between 0 and 1. The number of actual value that a sample can take between 0 and 1 is defined by the quantification (16 bits, 24 bits, etc.). But this is a linear scale, and thus, it does not correspond to our perception of sound. The dBFS solve this problem. A value of 1 in linear corresponds to 0 dBFS, a value of 0 in linear corresponds to -inf in dBFS (-96 dB at 16 bits, -144 at 24 bits, etc.).

Now that we have a scale that behaves closely to our perception, we need to find a way to measure sounds loudness. Here, a peak measurement (the value of each actual samples in digital sound) is not a good candidate, because fast sound variation in volume does not matter that much in how we perceive loudness. Also, the frequency has a strong impact on how loud a sound seems. This is why engineers have proposed the **loudness unit**.

![Relation between loundness and frequency.](:/a0b091392dc144b28228cdde92820b39)

**Loudness unit** or **LU** is a measurement method of sound pressure level that want to be as close as possible to our perception of sound. This was established by the [European Broadcast Union Recommandation (EBU R) 128](https://tech.ebu.ch/docs/r/r128.pdf), using measurement method described in the [International Telecommunication Union Recommandation (ITU-R) BS.1770](https://www.itu.int/rec/R-REC-BS.1770/recommendation.asp?lang=en&parent=R-REC-BS.1770-4-201510-I). It has been adopted by most streaming services.

There are different time windows for the loudness measurement : momentary, short-term, long and integrated, which correspond to the following citation from the [EBU Tech 3341](https://tech.ebu.ch/docs/tech/tech3341.pdf) :

*1. The momentary loudness uses a sliding rectangular time window of length 0.4 s. The measurement is not gated.
2. The short-term loudness uses a sliding rectangular time window of length 3 s. The measurement is not gated. The update rate for ‘live meters’ shall be at least 10 Hz.
3. The integrated loudness uses gating as described in ITU-R BS.1770-4. The update rate for ‘live meters’ shall be at least 1 Hz.*

In the music industry, it is the integrated value that is used as a reference for streaming services.

---

**Part 2 : Theoric - Know your tools**

Last time, we had a first discussion about limiting and try to get a rough idea of what it is doing. Now we will have quite a deep dive in limiters' guts.

In case you are in a hurry, check the TL;DR section of this article to get a summary as well as a video explanation of the subject.

## Definition

A limiter is a very special kind of device. It bridges the gap between more conventional compression processing and saturation. There is a common definition that stands that a limiter is a compressor with a ratio above 10:1. This means that if your input signal exceeds the threshold by 10 dB, there will only be 1 dB above the threshold at the output.

But this definition is not satisfactory for the kind of limiters we use at the end of the mastering chain. These limiters are known as "True Peak Limiter".

True peak limiting means that at the very moment where a sample as a value superior to the threshold of a limiter, it will be caught by it. You can think of it as a compressor with an attack and an RMS window equal to zero.

Now, True Peak Limiters also have an infinite ratio. This is also a very important point : an audio sample cannot exceed the threshold. Think of it as a kind of warranty imply by a mastering limiter. If you have set the threshold to  -1 dBTP, the audio signal will never go beyond this value. This is why a limiter could also be seen as a saturation tool, because it hard clip the input signal. Theoretically, you could replace a limiter by a clipper to get the same warranty, but sonic results have a strong chance to be problematic.

## Family picture

Let's look at what happens to very simple signals when we send them in a limiter. We will first look at the spectrum analysis of a sine wave at a frequency of 440 Hz, with our Elixir limiter on and off. The oscillator generates the tone at a -6 dBTP level, and Elixir has its threshold set at -9 dBTP. So, we should see a perfect -3 dB of gain reduction when Elixir is on.

![Elixir settings](:/95689639091c45d0ac152b567fb5677b)

![Spectrum analysis without Elixir](:/8dc927eee74349d6ab7b52a726cdb21f)

![Spectrum analysis with Elixir](:/d5d8f754a1514059b8f5bc8dbf43ce79)

Maybe you are wondering if there is any difference between the two previous pictures. And yes, there is a little 3 dB difference between the two peaks. What it means is that we did not add any saturation in the process.

Now, to make it a bit closer to sound we will have to handle with limiters, let's modulate the amplitude of the sine wave. For this I have simply added a tremolo with a frequency of 4 Hz. It goes from unity gain to -inf dB.

![reaper_P57Sjlcj1V.gif](:/21cf0a0dddf34835a8e16b0ce822f85d)

Now, we can see that there are some additional frequencies here. These are added by the fact that the limiter is engaged and disengaged by the amplitude modulation, and the envelope add some harmonic distortion. What should be kept in mind is that the harder the peak is, more saturation will be added.

> If you use them right, you could get a "light" version (none true peak) of Elixir with Alchemist, Solera or PureComp. Engaged the infinite ratio option, set the delay to the same value as the attack and play with the release and hold time to get the desired result.

![example of Alchemist as a multiband limiter](:/3682c927584045bda9f637108e536fa3)

## Smoothing the clipping

To prevent and reduce any distortion added by a limiter, we use the envelope, very much like a compressor.

### Attack settings

Didn't we say that a limiter has an attack of 0 ms? Well, not exactly. What we want to be sure of is that no sample can exceed the threshold. Using an attack of 0 ms is a solution but it also generates additional saturation that we want to avoid. So what could we do about it ? This is where look ahead become very handy.

A look ahead, as its name implies, allow the algorithm to look ahead, before the signal. So, if we know in advance when the signal will pass the threshold, we could manage to open the envelope before that happens.

> Remember, because it is still unfortunately impossible to go back in time, look-ahead will add latency to the signal.

Another way to understand it is to look at a block diagram of a limiter.


![Diagramme sans nom.drawio.png](:/9090334c47a341d39cb48920ac810a2b)


There is a detection circuit that will tell when the signal pass the threshold. In a traditional compressor this moment will trigger the envelope applied by the processing block. So, in this regard, the processing in a limiter is always kind of "late". Now, the look ahead is a simple delay at the input of the processing stage.

This attack time allows a softer clipping of the signal. It is not often seen as a user interface's parameter, but almost all modern "True-Peak" Limiter has one hidden under the hood.

### Release settings

It is more straightforward to understand than the attack time, as it is the same thing as in a compressor. The release time is the time for a limiter to completely stop processing the signal once the signal goes back below the threshold. It has a strong impact on the quality of a limiter.

+ Set it fast to get a snappy result, with a more saturated character
+ Set it slow to get a soft result, with a more compressed or pumping character

## Is True-Peak really True-Peak ?

A True-Peak limiter will always guarantee that you never exceed its threshold. At least, if you never do any kind of samplerate conversion afterward!

Remember, in a digital audio workstation, we work with a digital representation of sound. To do so, we have sampled the audio signal at a certain rate (44.1 kHz, 48 kHz, 96 kHz, 192 kHz, etc.). So it is possible that the original signal had, between two samples, a value of higher value. After a resampling, this value may appear and generate value above the threshold of the limiter. This phenomenon is known as "intersample peak".

To prevent this effect, many limiters use oversampling. It is often hidden under the name "intersample-peak detection". Using oversampling will increase the resolution of the limiter and prevent intersample peak from passing through.

## TL;DR

*/// Elixir tutorial -> todo : revamp*

Limiter is a dynamic processor. It bridges the gap between compression and saturation. Mastering grade limiter is characterized by an infinite ratio and a true-peak detection. This guarantee that a signal will never exceed the threshold of the limiter.

Because a limiter has a very strong behaviour in regard of the input signal, it can generate distortion. To prevent it as much as possible, plug-in constructor use complex envelope strategy involving looking ahead with attack time, and often give the user a way to control the release time.

Alas, oversampling is often used in limiters to prevent intersample peak from passing through the limiter.

---

**Part 3 : Use case & immersive content**

In the previous part, we discuss about general usage of limiters, and we also give quite a deep explanation of the processing involved. Now we will discuss the different workflow surrounding the use of a limiter.

In case you are in a hurry, check the TL;DR section of this article to get a summary as well as a video explanation of the subject.

## The very final step

I'm sure you have got it by now, a limiter should be the very last piece of audio software encountered by the signal you are processing. Its best place is at the very end of the master bus.

If you are not looking for huge loudness, only one limiter will very much be enough. Otherwise, doing all the gain reduction necessary to get a very loud mix with only one limiter is often problematic. This is the way many mastering engineers use multiple limiter and do the peak reduction little by little.

We have a very similar concept in Elixir called stage. It is exactly like having several Elixir chained up. For example, with a stage set to 4, it is like having four Elixirs in a row. The gain reduction is then applied uniformly between all the stage based on the threshold value.


![Elixir multi stages feature](:/9ec85e15e5fe463e9174092034ae0fa4)


The best practice while doing limiting on a mix is to do it at a constant level. If your limiter automatically compensates for the volume loss of the crest being cut off, you will have a harder time to judge is the limiter is working too hard. So, while you are adjusting the limiter, always compensate with the output level to get the same loudness that the input signal. Once you are satisfied with the result, you can remove the attenuation.

For example, using the Elixir limiter, if you have done an input gain of 5 dB, lower the threshold of 4 dB and activate the option to auto-makeup, you would have to lower the output gain of 9 dB to match the input level.

## Loudness is more good

If you want even more loudness from your mix, you may want to try the following tricks :

+ Having the "right" balance between tracks help tremendously. It's a good question to examine first, that can eventually be solved by a stem mastering approach.
+ You may need to reduce or remove the channel link of your limiter to avoid over limiting.
+ Manage the low end of your mix.The more bass heavy the mix is, the harder it will be to get high loudness. Here, EQ and multiband compression are your best bet.
+ Some parallel compression with a look ahead to avoid peak amplification can help you to increase the RMS level of the mix. We have two preset builds on this idea in our Sierra compressor, called "Parallel Enhancer Loud" and "Parallel Enhancer Soft".

![reaper_ojif0erOWF.gif](:/70da95a41d4c4be08a8d00dbf1ca3da9)

+ You could also try to combine different types of limiter, for example, stack a multi-band limiter followed by a single band one. We also have a preset designed for this use case in the Alchemist plug-in called "5-bands: Limiter"

![reaper_IaQnHcjJ0O.gif](:/9417892149384e3d8251de310f33768f)

But be careful to not become a loudness war casualties and remember that loudness is not a necessity. Loudness may seem fun at first glance, but it will quickly damage all what has been done at the recording and mixing stage.

## Immersive audio and limiting

If you are doing some immersive audio work, maybe you are wondering how to apply to limit on content with more than two channels.

When working with classic surround format, 5.1, 7.1 or even Dolby Atmos beds (5.1.2, 7.1.4, etc.), you will need a limiter that handle as many channels as present in the surround bus. Good news is that our Elixir plug-in can process up to 16 channels.

In this case, the channel link feature becomes useful. If you have spent time creating an immersive audio sound scene, you don't want to arm it at the mastering stage. But engaging the channel link sometimes creates over compression. The Elixir features a "dynamic" mode that will process transient just like there is no channel link but the rest of the processing will be applied identically to all of them.

In case you are dealing with ambisonic streams, you should always have all the channel links together without any optimization of any kind (no dynamic mode for Elixir). It is due to the fact that ambisonic channels are not mapped to any particular speaker, and making gain reduction on only some of them can really arm the sound stage after the decoding. Thanks to its 16 channels, Elixir can handle ambisonic streams up to the third order.


![Use 100% channel link for HOA processing](:/1cc8168e6a604cc898284d8c32791e34)


When mixing in Dolby Atmos, you are dealing with an object-based mixing. Here the conversation becomes complex, because there is, at this day, no easy way to master an object-oriented mix. If you really want to have a final limiter, you will have to only mix with beds. The main issue is that it does limit you to 7.1.2 format. Otherwise, you can try limit on the object directly, but it will be time consuming and heavy on the processor.

## TL;DR

*/// VIDEO : master limiting at different loudness, with different process*

Limiter is used last in the effect chain. If another plug-in is inserted after, it has a strong chance to remove the level guaranty of the limiter.

Originally, only was limiter was used on the master, but sound engineer notice that chaining multiple limiters could lead to a more transparent result. With *Elixir* it is the equivalent of using the stage control.

Modern mastering technic tend to favour "stem processing". Multiple files are sent to mastering, each one of them corresponding to a main bus in the mixing session. Limiting can be applied directly on this bus.

For immersive content, a multi-channel limiter such as *Elixir* can be used on different kinds of bus size, from quadraphonic to 3rd order ambisonic. For channel-based bus (quadraphonic, 5.1, 7.1.2, etc.), channel-link control helps to find compromise between preservation of sound localization and over-processing. When dealing with ambisonic streams, the channel link should always be on (100% and no auto mode for *Elixir*).

When dealing with Dolby Atmos, limiting can be used on busses and on objects, but there is no easy way, for now, to link parameters to simplify the workflow. 

 -->