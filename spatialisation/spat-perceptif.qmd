# Mixage orienté canal

On parle de mixage orienté canal, ou d'orienté canal tout court, lorsqu'un ensemble de canaux audio représente directement un arrangement de haut-parleurs. Par exemple, un mixage stéréophonique produit deux canaux, un pour l'enceinte gauche et un pour l'enceinte droite. De façon analogue, une prise de son 5.0 est conçue pour que chacune des capsules du dispositif soit affectée à une enceinte précise. Cette approche orientée canal est au final la façon la plus courante, et semble-t-il la plus naturelle, de penser la spatialisation sonore. Elle est également impérative à une certaine étape du chemin du signal. Par exemple, pour un mixage ambisonique, il sera nécessaire de le décoder vers un flux audio orienté canal afin de pouvoir écouter le rendu sonore.

Lors d'un mixage orienté canal, on utilise une **loi de panoramique** pour répartir l'énergie d'une source sonore sur les différents haut-parleurs. Il existe alors deux grandes approches : l'approche perceptive, spécifiquement conçue pour des dispositifs de reproduction centrés sur un point d'écoute idéal (systèmes subjectifs); et l'approche matricielle, particulièrement efficace pour des systèmes maillés multicouches (reproduction objective).

## L'approche perceptive

Les stratégies de panoramique perceptives portent ce nom car elles reposent toutes sur un principe très fort, celui du centre fantôme. Illustrons ce sujet pour une simple stéréophonie. Lorsque nous utilisons un panneur stéréo pour placer une source au milieu de la scène sonore, le signal est au final diffusé en même temps et au même niveau sur les deux enceintes. En supposant que les enceintes soient appairées, on a alors la sensation, l'impression que le son émane du centre des enceintes. Ce phénomène perceptif permet alors de créer toute une scène sonore grande de soixante degrés en stéréophonie.

Ce centre fantôme est cependant assez fragile. En effet, sa crédibilité dépend fortement de l'espacement, de l'angle entre les enceintes. Si celui-ci est tout à fait convaincant en stéréo (60°), lorsque l'on passe un écart de quatre-vingt-dix degrés entre les enceintes, alors cette illusion ne fonctionne plus vraiment et la cohérence de la scène sonore s'effondre.

:::{.callout-tip}
Quand on a le choix du nombre et du placement des enceintes d'un système, on préfère souvent ne pas dépasser cet écart de soixante degrés entre les enceintes afin de preserver la cohérence de l'espace sonore.
:::

On retrouve ici toute la difficulté de certains systèmes, comme le 5.1 et ses dérivés, à reproduire une spatialisation cohérente, cela du à certains écarts d'angles entre enceintes bien trop importants.

### Le panoramique stéréophonique

Le "panpot" stéréophonique permet de déplacer un son de l'enceinte gauche à l'enceinte droite. Dans ses positions extrêmes, le signal n'est que dans l'enceinte gauche ou que dans l'enceinte droite. Il est important de bien saisir le fonctionnement de cette loi de panoramique, car les extensions multicanales en découlent.

Pour qualifier cette loi, on cherche donc les variables $g_L$ et $g_R$, respectivement les gains de restitution de l'enceinte gauche et droite. Puisque nous cherchons deux inconnus, il nous faut alors deux équations. Nous allons alors définir une relation entre $g_L$ et $g_R$ en fonction de la valeur du panoramique, et une loi de conservation entre ces deux variables (selon la puissance ou selon l'énergie).

$$
\left\{\begin{array}{@{}l@{}}
    \displaystyle \sqrt{3}\tan(\phi) = \frac{g_L-g_R}{g_L+g_R} \\
    \\
    g_L^2+g_R^2 = 1 \\
\end{array}\right.\,.
$$

```{python}

#|fig-cap: Tracé de $\sqrt{3}\tan(\phi)$ en fonction de $\phi$

import numpy as np
import matplotlib.pyplot as plt

phi = np.arange(-np.pi/6,np.pi/6,0.01)
tanPhi = np.tan(phi)/np.tan(np.pi/6)

fig, ax = plt.subplots()
fig.set_figheight(2)
ax.set_ylim(-1,1);
ax.plot(phi*180/np.pi,tanPhi)

```

Ici, $\phi$ correspond à la position du potentiomètre de panoramique, tel que $-30° \leq \phi \leq 30°$. On retrouve alors nos 60° de liberté (ou $\frac{\pi}{3}$ radians). Lorsqu'on exprime $g_L^2 + g_R^2 = 1$, on impose une énergie constante au système. Cela signifie donc que, lorsque notre potentiomètre de panoramique est positionné au centre, l'atténuation est de **trois décibels**. En resolvant le système, nous trouvons pour $g_L$ et $g_R$:

$$
\left\{\begin{array}{@{}l@{}}
    \displaystyle g_L^2 = \frac{(1+\sqrt{3}\tan(\phi))^\frac{1}{2}}{(1-\sqrt{3}\tan(\phi))^\frac{1}{2}+(1+\sqrt{3}\tan(\phi))^\frac{1}{2}}\\
    \\
    \displaystyle g_L^2 = \frac{(1-\sqrt{3}\tan(\phi))^\frac{1}{2}}{(1-\sqrt{3}\tan(\phi))^\frac{1}{2}+(1+\sqrt{3}\tan(\phi))^\frac{1}{2}}\\\\
\end{array}\right.\,.
$$


Si l'on souhaite maintenant conserver la puissance du système (panoramique avec une atténuation de **six décibels** au centre), on pose alors le système suivant:

:::{layout-ncol="2"}
$$
\left\{\begin{array}{@{}l@{}}
    \displaystyle\sqrt{3}\tan(\phi) = \frac{g_L-g_R}{g_L+g_R} \\
    \\
    g_L+g_R = 1 \\
\end{array}\right.\,.
$$

$$
\left\{\begin{array}{@{}l@{}}
    \displaystyle g_L = 1+\sqrt{3}\tan(\phi)\\
    \\
    \displaystyle g_R = 1-\sqrt{3}\tan(\phi)\\
\end{array}\right.\,.
$$
:::

Dessinons alors $g_L$ et $g_R$, selon les deux lois précédentes.

```{python}

#|fig-cap: A gauche, une loi de panoramique avec une atténuation de $3 dB$ au centre. A droite une loi de panoramique avec une atténuation de $6 dB$ au centre.

db = lambda x: 20*np.log10(np.abs(x))
dbnorm = lambda x: 20*np.log10(np.abs(x)/np.max(x))

import numpy as np
import matplotlib.pyplot as plt

phi_0 = np.pi/6
phi = np.arange(-phi_0+0.00001,phi_0-0.00001,np.pi/10000)

gL = np.sqrt(np.sqrt(1+np.sqrt(3)*np.tan(phi))/(np.sqrt(1-np.sqrt(3)*np.tan(phi))+np.sqrt(1+np.sqrt(3)*np.tan(phi))))
gR = np.sqrt(1-np.power(gL,2))

gLprim= 0.5*(1+np.sqrt(3)*np.tan(phi))
gRprim= 1-gLprim

fig, axs = plt.subplots(ncols=2,nrows=1)
axs[0].plot(180*phi/np.pi,db(gL))
axs[0].plot(180*phi/np.pi,db(gR))
axs[1].plot(180*phi/np.pi,db(gLprim))
axs[1].plot(180*phi/np.pi,db(gRprim))

for ax in axs:
    ax.set_yticks(np.arange(-21,3,3))
    ax.set_ylim(-20,0)
    ax.grid()


```

En guise de dernier exemple, nous pourrions aussi tracer la loi de panoramique tel que l'atténuation au centre soit de **quatre décibels**. Pour ce faire, nous souhaitons donc changer la loi de conservation. On pose alors:

$$g_L^\eta+g_R^\eta=1$$

Pour trouver $\eta$, on se place dans le cas ou $g_L$ et $g_R$ sont égaux et valent $10^{\frac{-4}{20}} \approx 0.63$. On trouve alors $\eta=1.5$.

:::{layout-ncol="2"}

$$
\left\{\begin{array}{@{}l@{}}
    \displaystyle\sqrt{3}\tan(\phi) = \frac{g_L-g_R}{g_L+g_R} \\
    \\
    g_L^{1.5}+g_R^{1.5} = 1 \\
\end{array}\right.\,.
$$

```{python}
import numpy as np
import matplotlib.pyplot as plt

db = lambda x: 20*np.log10(np.abs(x))
dbnorm = lambda x: 20*np.log10(np.abs(x)/np.max(x))

phi = np.arange(-np.pi/6,np.pi/6,0.01)
tanPhi = np.tan(phi)/np.tan(np.pi/6)

gL=np.power(((np.power(1-tanPhi,1.5))/((np.power(1+tanPhi,1.5))+(np.power(1-tanPhi,1.5)))),1/1.5)
gR=np.power(1-np.power(gL,1.5),1/1.5)

fig, ax = plt.subplots()
fig.set_figheight(2)
ax.set_ylim(-1,1);
ax.plot(phi*180/np.pi,db(gL))
ax.plot(phi*180/np.pi,db(gR))
ax.set_yticks(np.arange(-21,3,3))
ax.set_ylim(-20,0)
ax.grid()

```

:::

### Généralisation du pan d'un signal sur deux enceintes.

Continuons l'étude d'un pan pour deux enceintes, mais tachons de généraliser son fonctionnement. Dorénavant, nous ne voulons plus seulement nous attacher au cas de la stéréophonie, mais nous souhaitons pouvoir adapter notre stratégie pour des paires d'enceintes formant un angle avec l'auditeur quelquonque.

Il convient donc d'abandonner le terme $\sqrt{3}\tan{\phi}$ pour $\frac{\tan(\phi)}{\tan(\phi_0)}$. Ici, $\phi_0$ correspond à la moitié de l'angle entre les enceintes, donc 30° (ou $\frac{\pi}{6}$ radians) pour la stéréophonie. $\phi$ correspond toujours à la position du potentiomètre de panoramique, mais dont ses bornes sont $-\phi_0 \leq \phi \leq \phi_0$. On retrouve alors nos 60° de liberté (ou $\frac{\pi}{3}$ radians) dans le cas de la stéréophonie.

```{python}

#|fig-cap: Evolution de $\frac{\tan(\phi)}{\tan(\phi_0)}$ en fonction de $\phi_0$

import numpy as np
import matplotlib.pyplot as plt

db = lambda x: 20*np.log10(np.abs(x))
dbnorm = lambda x: 20*np.log10(np.abs(x)/np.max(x))

phi_spkr = [np.pi/6, np.pi/4, np.pi/2-0.1]

fig, axs = plt.subplots(ncols=3,nrows=1)
fig.set_figheight(3)
fig.tight_layout()


for phi_0 in phi_spkr:
    phi = np.arange(-phi_0,phi_0,phi_0/10000)
    tanPhi = np.tan(phi)/np.tan(phi_0)
    idx = phi_spkr.index(phi_0)
    axs[idx].plot(phi*180/np.pi,tanPhi)
    axs[idx].set_ylim(-1,1)
    # axs[idx].set_xlim(-phi_0,phi_0)

```

Nous voulons aussi manipuler l'évolution du gain de chaque haut-parleurs. Pour cela, nous pouvons écrire:

$$ 
\frac{\tan(\phi)}{\tan(\phi_0)} = \frac{g_L^{\gamma}-g_R^{\gamma}}{g_L^{\gamma}+g_R^{\gamma}}
$$

lorsque $\gamma$ vaut un, alors nous retrouvons les conditions traités ci-dessus. Pour alléger l'écriture, on définit la fonction $q$, qui pour tout $\phi$ vaut $q(\phi)=\frac{\tan(\phi)}{\tan(\phi_0)}$. En rassemblant l'ensemble de ces conditions, cela donne :

:::{layout-ncol="2"}

$$
\left\{\begin{array}{@{}l@{}}
    \displaystyle q(\phi) = \frac{g_L^{\gamma}-g_R^{\gamma}}{g_L^{\gamma}+g_R^{\gamma}} \\
    \\
    \displaystyle g_L^{\eta}+g_R^{\eta} = 1 \\
\end{array}\right.\,.
$$

$$
\left\{\begin{array}{@{}l@{}}
    \displaystyle g_L^\eta = \frac{(1+q(\phi))^\frac{\eta}{\gamma}}{(1-q(\phi))^\frac{\eta}{\gamma}+(1+q(\phi))^\frac{\eta}{\gamma}}\\
    \\
    \displaystyle g_R^\eta = \frac{(1-q(\phi))^\frac{\eta}{\gamma}}{(1-q(\phi))^\frac{\eta}{\gamma}+(1+q(\phi))^\frac{\eta}{\gamma}}\\
\end{array}\right.\,.
$$

:::

Nous pouvons maintenant étudier l'influence du terme $\gamma$. Pour simplifier la conversation, nous nous replaçons dans les conditions de la stéréophonie avec conservation de l'énergie ($\phi_0 = 60°$ et $\eta = 2$).

```{python}

#|fig-cap: A gauche, une panoramique d'amplitude ($\gamma = 1$). A droite une panoramique d'intensité ($\gamma = 2$).

db = lambda x: 20*np.log10(np.abs(x))
dbnorm = lambda x: 20*np.log10(np.abs(x)/np.max(x))

import numpy as np
import matplotlib.pyplot as plt

phi_0 = np.pi/6
phi = np.arange(-phi_0+0.00001,phi_0-0.00001,np.pi/10000)

gL = np.sqrt(np.sqrt(1+np.sqrt(3)*np.tan(phi))/(np.sqrt(1-np.sqrt(3)*np.tan(phi))+np.sqrt(1+np.sqrt(3)*np.tan(phi))))
gR = np.sqrt(1-np.power(gL,2))

gLprim= np.sqrt((1+np.sqrt(3)*np.tan(phi))/((1-np.sqrt(3)*np.tan(phi))+(1+np.sqrt(3)*np.tan(phi))))
gRprim= np.sqrt(1-np.power(gLprim,2))

fig, axs = plt.subplots(ncols=2,nrows=1)

axs[0].plot(180*phi/np.pi,db(gL))
axs[0].plot(180*phi/np.pi,db(gR))
axs[1].plot(180*phi/np.pi,db(gLprim))
axs[1].plot(180*phi/np.pi,db(gRprim))

for ax in axs:
    ax.set_yticks(np.arange(-21,3,3))
    ax.set_ylim(-20,0)
    ax.grid()


```

On remarque, entre les deux courbes ci-dessus, une différence d'évolution des gains des deux enceintes. A gauche, nous appliquons une panoramique d'amplitude, à droite une panoramique d'intensité. Cela se concrétise par une zone de contribution commune des deux haut-parleurs plus faibles dans le cas de la panoramique d'intensité.

<!-- Relier à Rv et Re -->



### le VBAP {#sec-vbap}

### Le VBIP

### Le LBAP {#sec-lbap}

### Autres variantes

## L'approche matricielle

### Le DBAP

### Le KNN